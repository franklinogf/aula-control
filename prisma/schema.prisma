// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

model School {
  id       Int    @id @default(autoincrement())
  name     String @unique @db.VarChar(200)
  gradeMax Int    @default(30) @db.UnsignedSmallInt()
  year     String @db.Char(5)
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique @db.VarChar(150)
  password String @db.VarChar(100)
  roleId   String @db.VarChar(100)
  role     Role   @relation(fields: [roleId], references: [type])

  Parent  Tutor?
  Teacher Teacher?

  @@map("users")
}

model Role {
  type String @id @unique @db.VarChar(100)
  user User[]

  @@map("roles")
}

model RelationType {
  id               Int                @id @default(autoincrement())
  description      String             @unique @db.VarChar(50)
  statusId         Int
  status           Status             @relation(fields: [statusId], references: [id])
  StudentReference StudentReference[]
  deleteAt         DateTime?

  @@map("relation_types")
}

model StudentReference {
  studentId           String
  student             Student           @relation(fields: [studentId], references: [id])
  relationTypeId      Int
  referenceType       RelationType      @relation(fields: [relationTypeId], references: [id])
  personalReferenceId String
  personalReference   PersonalReference @relation(fields: [personalReferenceId], references: [id])
  canBeContacted      Boolean

  @@id([studentId, personalReferenceId])
  @@map("student_references")
}

model PersonalReference {
  id                   String             @id @default(uuid())
  name                 String             @db.VarChar(100)
  lastname             String             @db.VarChar(100)
  phone                String             @unique @db.VarChar(15)
  celPhone             String             @unique @db.VarChar(15)
  email                String             @unique @db.VarChar(200)
  address              String             @db.VarChar(200)
  identificationNumber String             @unique @db.VarChar(15)
  identification       IdentificationType @relation(fields: [identificationTypeId], references: [id])
  identificationTypeId Int                @unique
  deleteAt             DateTime?
  identificationId     Int
  StudentReference     StudentReference[]

  @@map("personal_references")
}

model Tutor {
  id       Int       @id @default(autoincrement())
  userId   Int       @unique
  user     User      @relation(fields: [userId], references: [id])
  students Student[]
  year     String    @db.Char(5)
  deleteAt DateTime?

  @@map("parents")
}

model Teacher {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  lastname      String    @db.VarChar(100)
  phone         String    @unique @db.VarChar(15)
  email         String    @unique @db.VarChar(200)
  dob           DateTime  @db.Date()
  userId        Int       @unique
  user          User      @relation(fields: [userId], references: [id])
  grade         Grade?
  knownSubjects Json
  year          String    @db.Char(5)
  courses       Course[]
  deleteAt      DateTime?
  Post          Post[]

  @@map("teachers")
}

model Grade {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(10)
  year      String    @db.Char(5)
  teacherId Int?      @unique
  teacher   Teacher?  @relation(fields: [teacherId], references: [id])
  courses   Course[]
  students  Student[]
  deleteAt  DateTime?
  Post      Post[]

  @@map("grades")
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(30)
  courses  Course[]
  Note     Note[]
  deleteAt DateTime?

  @@map("subjects")
}

model IdentificationType {
  id                Int                @id @default(autoincrement())
  description       String             @unique @db.VarChar(50)
  status            Status             @relation(fields: [statusId], references: [id])
  statusId          Int
  student           Student?
  personalReference PersonalReference?

  @@map("identification_types")
}

model Status {
  id             Int                  @id @default(autoincrement())
  description    String               @unique @db.VarChar(50)
  status         String               @unique @db.Char(1)
  gender         Gender[]
  identification IdentificationType[]
  relationType   RelationType[]
  Student        Student[]

  @@map("statuses")
}

model Gender {
  id          Int       @id @default(autoincrement())
  description String    @unique @db.VarChar(50)
  status      Status    @relation(fields: [statusId], references: [id])
  statusId    Int
  students    Student[]
}

model Student {
  id                   String             @id @default(uuid())
  name                 String             @db.VarChar(50)
  lastname             String             @db.VarChar(50)
  identificationNumber String             @unique @db.VarChar(15)
  identification       IdentificationType @relation(fields: [identificationTypeId], references: [id])
  identificationTypeId Int                @unique
  phone                String             @unique @db.VarChar(15)
  celPhone             String             @unique @db.VarChar(15)
  email                String             @unique @db.VarChar(200)
  dob                  DateTime           @db.Date()
  parentId             Int
  parent               Tutor              @relation(fields: [parentId], references: [id])
  gradeId              Int
  grade                Grade              @relation(fields: [gradeId], references: [id])
  created_at           DateTime           @default(now())
  year                 String             @db.Char(5)
  notes                Note[]
  attendances          Attendance[]
  deleteAt             DateTime?
  conducts             Conduct[]
  reports              Report[]
  genderId             Int
  gender               Gender             @relation(fields: [genderId], references: [id])
  references           StudentReference[]
  address              String             @db.VarChar(200)
  statusId             Int
  status               Status             @relation(fields: [statusId], references: [id])

  @@map("students")
}

model Course {
  id         Int          @id @default(autoincrement())
  gradeId    Int
  grade      Grade        @relation(fields: [gradeId], references: [id])
  subjectId  Int
  subject    Subject      @relation(fields: [subjectId], references: [id])
  teacherId  Int
  teacher    Teacher      @relation(fields: [teacherId], references: [id])
  day        String       @db.VarChar(10)
  time       DateTime     @db.Time()
  year       String       @db.Char(5)
  deleteAt   DateTime?
  Attendance Attendance[]

  @@map("courses")
}

model Note {
  id        Int     @id @default(autoincrement())
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  note1    Int? @db.UnsignedSmallInt()
  note2    Int? @db.UnsignedSmallInt()
  note3    Int? @db.UnsignedSmallInt()
  note4    Int? @db.UnsignedSmallInt()
  average1 Int? @db.UnsignedSmallInt()
  exam1    Int? @db.UnsignedSmallInt()

  note5    Int? @db.UnsignedSmallInt()
  note6    Int? @db.UnsignedSmallInt()
  note7    Int? @db.UnsignedSmallInt()
  note8    Int? @db.UnsignedSmallInt()
  average2 Int? @db.UnsignedSmallInt()
  exam2    Int? @db.UnsignedSmallInt()

  year     String    @db.Char(5)
  deleteAt DateTime?

  @@map("notes")
}

model AttendanceOption {
  name        String       @id @unique @db.Char(2)
  description String       @db.VarChar(150)
  Attendance  Attendance[]
  deleteAt    DateTime?

  @@map("attendace_options")
}

model Attendance {
  id                 Int              @id @default(autoincrement())
  student            Student?         @relation(fields: [studentId], references: [id])
  studentId          String?
  courseId           Int
  course             Course           @relation(fields: [courseId], references: [id])
  date               DateTime         @db.Date()
  attendanceOptionId String           @db.Char(2)
  attendanceOption   AttendanceOption @relation(fields: [attendanceOptionId], references: [name])
  year               String           @db.Char(5)
  deleteAt           DateTime?

  @@map("attendances")
}

model Conduct {
  id          Int      @id @default(autoincrement())
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id])
  date        DateTime @db.Date()
  description String?
  year        String   @db.Char(5)
}

model Report {
  id          Int      @id @default(autoincrement())
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id])
  description String   @db.Text
  date        DateTime @db.Date()
  year        String   @db.Char(5)

  @@index([studentId, date, year])
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(150)
  description String    @db.Text
  teacherId   Int
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  gradeId     String
  grade       Grade     @relation(fields: [gradeId], references: [name])
  year        String    @db.Char(5)
  Comment     Comment[]
}

enum AuthorModel {
  parent
  teacher
}

model Comment {
  id          Int         @id @default(autoincrement())
  postId      Int
  post        Post        @relation(fields: [postId], references: [id])
  authorId    Int
  authorModel AuthorModel
  comment     String      @db.Text
}
